/*
  Grand App - v3 (Final Home)
  Main JavaScript file for the home screen.
  
  *** ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™: ***
  1. ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü: ‡¶π‡ßã‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßá‡¶ú ‡¶â‡¶≠‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßã‡¶ü ‡ß®‡ß¶‡¶ü‡¶ø‡•§
  2. ‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: ‡¶¶‡¶ø‡¶®‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá (‡¶Æ‡ßã‡¶ü ‡ß®‡ß¶‡¶ü‡¶ø‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá)‡•§
  3. ‡¶™‡¶™‡¶Ü‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: ‡¶Ü‡¶∞‡¶ì ‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
  4. ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü: ‡¶∞‡¶æ‡¶§ ‡ßß‡ß®‡¶ü‡¶æ‡ßü ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü‡•§
  5. Ad Loading Logic FIX: ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡ßá‡¶∞ SDK ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶´‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï ‡¶Ü‡¶∞‡¶ì ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
*/

// Using an IIFE (Immediately Activated Function Expression) to avoid polluting the global scope.
(() => {
  "use strict";

  // --- 1. Helper Functions ---
  const $ = (selector, parent = document) => parent.querySelector(selector);
  const $$ = (selector, parent = document) => Array.from(parent.querySelectorAll(selector));

  // --- 2. DOM Element Cache ---
  const els = {
    preloader: $("#preloader"),
    app: $("#app"),
    userName: $("#user-name"),
    userUsername: $("#user-username"),
    userAvatar: $("#user-avatar"),
    balanceAmount: $("#balance-amount"),
    tasksToday: $("#tasks-today"), // Home page stat
    referralsCount: $("#referrals-count"),
    modals: { video: $("#modal-watch-video") },
    homeTaskBtn: $('[data-task-btn]'), // Button on index.html
  };

  // --- 3. State Management & localStorage ---
  const STORE_KEYS = {
    balance: "grand_balance_v3",
    tasks: "grand_tasks_v3",
    referrals: "grand_referrals_v3",
    // New key to track home page task completion for the day
    homeTaskDone: "grand_home_task_done_v3",
  };
  
  const TASK_LIMIT = 20; // ‡¶Æ‡ßã‡¶ü ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü
  const TASK_REWARD = 1.00;
  const USER_INFO = {
    name: "A. K. Yeasin",
    username: "@yeasinkhan",
    avatar: "image/Gemini_Generated_Image_dcsl0idcsl0idcsl.png",
  };
  
  // Custom alert function (to keep consistency without structural changes)
  function showCustomAlert(message) {
    alert(message);
  }

  function getState() {
    // Current date for daily reset check
    const today = new Date().toDateString();
    
    // Get existing state or set defaults
    let balance = parseFloat(localStorage.getItem(STORE_KEYS.balance)) || 0.00;
    let referrals = parseInt(localStorage.getItem(STORE_KEYS.referrals)) || 0;
    
    let tasksState = JSON.parse(localStorage.getItem(STORE_KEYS.tasks)) || { date: today, completed: 0 };
    let homeTaskDoneState = JSON.parse(localStorage.getItem(STORE_KEYS.homeTaskDone)) || { date: today, done: false };

    // --- Daily Reset Logic (New Day Check) ---
    // If the date changes, reset completed tasks and home task status
    if (tasksState.date !== today) {
      tasksState = { date: today, completed: 0 };
    }
    if (homeTaskDoneState.date !== today) {
      homeTaskDoneState = { date: today, done: false };
    }

    return { balance, referrals, tasksState, homeTaskDoneState };
  }

  function saveState(state) {
    localStorage.setItem(STORE_KEYS.balance, state.balance.toFixed(2));
    localStorage.setItem(STORE_KEYS.referrals, state.referrals);
    localStorage.setItem(STORE_KEYS.tasks, JSON.stringify(state.tasksState));
    localStorage.setItem(STORE_KEYS.homeTaskDone, JSON.stringify(state.homeTaskDoneState));
  }
  
  // --- 4. UI/Data Sync Functions ---

  function updateUI(state) {
    if (els.userName) els.userName.textContent = USER_INFO.name;
    if (els.userUsername) els.userUsername.textContent = USER_INFO.username;
    if (els.userAvatar) els.userAvatar.src = USER_INFO.avatar;

    if (els.balanceAmount) els.balanceAmount.textContent = state.balance.toFixed(2);
    if (els.referralsCount) els.referralsCount.textContent = state.referrals;
    
    // Update Task Counter on Home Page and Task Page
    const taskCounterText = `${state.tasksState.completed}/${TASK_LIMIT}`;
    
    // For Home Page (index.html)
    if (els.tasksToday) {
      els.tasksToday.textContent = taskCounterText;
    }
    
    // For Task Page (task.html)
    const taskLimitDisplay = $("#task-limit-display");
    if (taskLimitDisplay) {
        taskLimitDisplay.textContent = taskCounterText;
    }

    // --- Task completion logic and button state ---
    const isLimitReached = state.tasksState.completed >= TASK_LIMIT;
    const startVideoBtn = $('[data-action="start-video"]'); // General task button (Modal)

    // A. Handle General Task Button (Task.html/Modal)
    if (startVideoBtn) {
        if (isLimitReached) {
            startVideoBtn.disabled = true;
            startVideoBtn.textContent = '‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑';
        } else {
             startVideoBtn.disabled = false;
             startVideoBtn.textContent = 'Watch Now';
        }
    }
    
    // B. Handle Home Page Daily Task Button (index.html)
    if (els.homeTaskBtn) {
        if (isLimitReached) {
             els.homeTaskBtn.disabled = true;
             els.homeTaskBtn.textContent = '‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑';
        } else if (state.homeTaskDoneState.done) {
             // Home task completed for today, but general limit not reached
             els.homeTaskBtn.disabled = true;
             els.homeTaskBtn.textContent = '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®';
        } else {
             // Home task available
             els.homeTaskBtn.disabled = false;
             els.homeTaskBtn.textContent = 'Watch & Earn';
        }
    }
  }

  // --- 5. Core App Logic ---

  function completeTask(taskType) {
    let state = getState();

    // 1. CRITICAL: Check the total limit again
    if (state.tasksState.completed >= TASK_LIMIT) {
      showCustomAlert("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
      return;
    }
    
    // 2. NEW LOGIC: Check if the task being completed is the HOME TASK
    if (taskType === 'home-daily' && state.homeTaskDoneState.done) {
        showCustomAlert("‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        return;
    }
    
    // 3. Update Balance
    state.balance += TASK_REWARD;
    
    // 4. Update Task Count (Increments the shared 0/20 limit)
    state.tasksState.completed += 1;
    
    // 5. Update Home Task State if applicable
    if (taskType === 'home-daily') {
        state.homeTaskDoneState.done = true;
        state.homeTaskDoneState.date = new Date().toDateString(); // Ensure date is updated
    }
    
    // 6. Save and Update UI
    saveState(state);
    updateUI(state);

    // Provide professional feedback
    showCustomAlert(`‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£! ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡ß≥${TASK_REWARD.toFixed(2)} ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ üéâ`);
  }
  
  function openModal(id, taskType) {
    const modal = $(`#${id}`);
    if (!modal) return;
    
    let state = getState();
    
    // Check total limit before opening modal
    if (state.tasksState.completed >= TASK_LIMIT) {
        showCustomAlert("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        return;
    }
    
    // Check home task limit if opening from the home button
    if (taskType === 'home-daily' && state.homeTaskDoneState.done) {
        showCustomAlert("‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        return;
    }
    
    // Attach the task type to the confirm button inside the modal
    const confirmBtn = modal.querySelector('[data-action="confirm-task"]');
    if (confirmBtn) {
        confirmBtn.disabled = true;
        confirmBtn.setAttribute('data-task', taskType || 'video'); // Pass task type
    }

    modal.setAttribute("aria-hidden", "false");
    els.app.setAttribute("aria-hidden", "true");
  }

  function closeModal(modal) {
    if (!modal) return;
    modal.setAttribute("aria-hidden", "true");
    els.app.setAttribute("aria-hidden", "false");
  }


  // Function to start the Video Ad and handle completion
  function startVideoAd(startBtn) { // Renamed to a generic name
      const modal = startBtn.closest('.modal');
      startBtn.disabled = true;
      startBtn.textContent = '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...'; // Professional text

      // Check if the main Ad SDK object is loaded (using Monetag as the internal reference)
      if (typeof Monetag === 'undefined') {
           startBtn.disabled = false;
           startBtn.textContent = 'Watch Now';
           showCustomAlert('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶è‡¶ñ‡¶®‡¶ì ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßá‡¶ú‡¶ü‡¶ø ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
           console.error("Ad SDK is not loaded.");
           return;
      }
      
      // Check if the specific ad unit method is available
      const adUnit = Monetag.show_10002890;
      if (!adUnit || typeof adUnit.showAd !== 'function') {
           startBtn.disabled = false;
           startBtn.textContent = 'Watch Now';
           showCustomAlert('‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶®‡ßá‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶® ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
           console.error("Ad unit (show_10002890) is not ready.");
           return;
      }

      // *** Ad SDK Call ***
      adUnit.showAd().then(() => { 
          // Ad finished/closed - Professional alert
          const completeBtn = modal.querySelector('[data-action="confirm-task"]');
          completeBtn.disabled = false;
          showCustomAlert('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® "Complete" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‚úÖ');
      }).catch((error) => {
          // Ad failed to load - Professional alert
          startBtn.disabled = false;
          startBtn.textContent = 'Watch Now';
          console.error('Video Ad Loading Error:', error);
          showCustomAlert('‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ üòî');
      });
  }


  // --- 6. Event Listeners ---
  
  function bindEvents() {
    document.addEventListener("click", (e) => {
      const openModalBtn = e.target.closest("[data-open-modal]");
      if (openModalBtn) {
          // Pass the task-type if available, e.g., from the home page button
          const taskType = openModalBtn.dataset.taskType; 
          openModal(openModalBtn.dataset.openModal, taskType);
      }
      
      const closeModalBtn = e.target.closest("[data-close-modal]");
      if (closeModalBtn) closeModal(closeModalBtn.closest(".modal"));
      
      const confirmBtn = e.target.closest('[data-action="confirm-task"]');
      if (confirmBtn && !confirmBtn.disabled) {
        completeTask(confirmBtn.dataset.task);
        closeModal(confirmBtn.closest(".modal"));
      }

      const startVideoBtn = e.target.closest('[data-action="start-video"]');
      if (startVideoBtn && !startVideoBtn.disabled) startVideoAd(startVideoBtn); // Updated function call
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        const activeModal = $('[aria-hidden="false"].modal');
        if (activeModal) closeModal(activeModal);
      }
    });
  }
  
  // --- 7. Initialization ---
  
  function init() {
    // Hide preloader
    if (els.preloader) els.preloader.classList.add("hidden");
    if (els.app) els.app.setAttribute("aria-hidden", "false");

    // Load and render initial data
    const initialState = getState();
    updateUI(initialState);
    bindEvents();
  }
  
  document.addEventListener("DOMContentLoaded", init);

})();
